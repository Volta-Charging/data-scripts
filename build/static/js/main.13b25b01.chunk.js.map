{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["mapkit","window","App","state","currentIndex","records","getRow","record","miles","Math","round","hypot","abs","react_default","a","createElement","key","concat","join","console","log","process","init","authorizationCallback","done","MAPKIT_API","axios","get","json","sites","data","slice","searchSession","Search","forEach","site","expected","location","coordinates","push","address","street_address","city","zip_code","search","error","_data$places$0$coordi","places","coordinate","longitude","latitude","split","_this2","setState","_ref","Object","toConsumableArray","_this3","this","_this$state","length","map","Component","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+RAGMA,EAASC,OAAOD,OAoEPE,6MAjEbC,MAAQ,CACNC,cAAe,EACfC,QAAS,MAuCXC,OAAS,SAACC,GACR,IAAMC,EAAQC,KAAKC,MAAoG,KAA9FD,KAAKE,MAAwC,OAAlCF,KAAKG,IAAIL,EAAO,GAAKA,EAAO,IAAiD,GAAlCE,KAAKG,IAAIL,EAAO,GAAKA,EAAO,KAAmB,KAAQ,IACtI,OAAOM,EAAAC,EAAAC,cAAA,OAAKC,IAAKT,EAAO,IAAjB,GAAAU,OAAyBV,EAAOW,KAAK,KAArC,KAAAD,OAA6CT,wNArCpDW,QAAQC,IAAI,mBAAoBC,+CAChCrB,EAAOsB,KAAK,CACVC,sBAAuB,SAASC,GAC9BA,EAAKH,8CAAYI,wBAIFC,IAAMC,IAAI,mDAAvBC,SACAC,EAAQD,EAAKE,KAAKC,MAAM,EAAG,IAE3BC,EAAgB,IAAIhC,EAAOiC,OAEjCJ,EAAMK,QAAQ,SAAAC,GACZ,IAAM5B,EAAS,GAET6B,EAAWD,EAAKE,SAASC,YAC/B/B,EAAOgC,KAAKH,EAAS,GAAIA,EAAS,IAElC,IAAMI,EAAO,GAAAvB,OAAMkB,EAAKM,eAAX,MAAAxB,OAA8BkB,EAAKO,KAAnC,MAAAzB,OAA4CkB,EAAKhC,MAAjD,KAAAc,OAA0DkB,EAAKQ,UAC5EX,EAAcY,OAAOJ,EAAS,SAACK,EAAOf,GACpC,GAAIe,EAAO,OAAO1B,QAAQ0B,MAAM,aAAcA,GADD,IAAAC,EAGdhB,EAAKiB,OAAO,GAAGC,WAAtCC,EAHqCH,EAGrCG,UAAWC,EAH0BJ,EAG1BI,SACnB3C,EAAOgC,KAAKU,EAAWC,GAEvB3C,EAAOgC,KAAKC,EAAQW,MAAM,KAAKjC,KAAK,MAEpCkC,EAAKC,SAAS,SAAAC,GAAA,IAAGlD,EAAHkD,EAAGlD,aAAcC,EAAjBiD,EAAiBjD,QAAjB,MAAgC,CAC5CD,aAAcA,EAAe,EAC7BC,QAAO,GAAAY,OAAAsC,OAAAC,EAAA,EAAAD,CAAMlD,GAAN,CAAeE,yIAWrB,IAAAkD,EAAAC,KAAAC,EAC2BD,KAAKvD,MAA/BC,EADDuD,EACCvD,aAAcC,EADfsD,EACetD,QAEtB,OACEQ,EAAAC,EAAAC,cAAA,WACGX,EAAe,GAAKA,IAAiBC,EAAQuD,OAAS,GACrD/C,EAAAC,EAAAC,cAAA,0EAGDX,EAAe,GAAKA,IAAiBC,EAAQuD,OAAS,EACrDvD,EAAQwD,IAAI,SAAAtD,GAAM,OAAIkD,EAAKnD,OAAOC,KAElCM,EAAAC,EAAAC,cAAA,8BAAAE,OAAyBb,EAAe,EAAxC,QAAAa,OAAgDZ,EAAQuD,iBA3DhDE,aCOEC,QACW,cAA7B9D,OAAOoC,SAAS2B,UAEe,UAA7B/D,OAAOoC,SAAS2B,UAEhB/D,OAAOoC,SAAS2B,SAASC,MACvB,2DCZNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.13b25b01.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios'\n\nconst mapkit = window.mapkit\n\nclass App extends Component {\n  state = {\n    currentIndex: -1,\n    records: [],\n  }\n\n  async componentDidMount() {\n    console.log('dev::process.env', process.env)\n    mapkit.init({\n      authorizationCallback: function(done) {\n        done(process.env.MAPKIT_API);\n      }\n    });\n\n    const json = await axios.get('https://api.voltaapi.com/v1/public-sites')\n    const sites = json.data.slice(0, 10)\n\n    const searchSession = new mapkit.Search()\n\n    sites.forEach(site => {\n      const record = []\n\n      const expected = site.location.coordinates\n      record.push(expected[0], expected[1])\n\n      const address = `${site.street_address}, ${site.city}, ${site.state} ${site.zip_code}`\n      searchSession.search(address, (error, data) => {\n        if (error) return console.error('dev::error', error)\n  \n        const { longitude, latitude} = data.places[0].coordinate\n        record.push(longitude, latitude)\n\n        record.push(address.split(',').join(' '))\n\n        this.setState(({ currentIndex, records }) => ({\n          currentIndex: currentIndex + 1,\n          records: [...records, record]\n        }));\n      })\n    })\n  }\n\n  getRow = (record) => {\n    const miles = Math.round(Math.hypot(Math.abs(record[0] - record[2]) * 69.172 + Math.abs(record[1] - record[3]) * 69) * 5280 * 1000) / 1000\n    return <div key={record[4]}>{`${record.join(',')},${miles}`}</div>\n  }\n\n  render() {\n    const { currentIndex, records } = this.state;\n\n    return (\n      <div>\n        {currentIndex > 0 && currentIndex === records.length - 1 && (\n          <div>expected lon,expected lat,actual lon, actual lat,address,ft</div>\n        )}\n\n        {currentIndex > 0 && currentIndex === records.length - 1 ? (\n          records.map(record => this.getRow(record))\n        ) : (\n          <p>{`Processing record ${currentIndex + 1} of ${records.length}`}</p>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}